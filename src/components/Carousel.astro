---
interface Props {
  /** Optional custom CSS classes for the wrapper */
  class?: string
}

const { class: className } = Astro.props
---

<div
  class={`border-4 border-purple relative w-2xl overflow-hidden ${className ?? ''}`}
>
  <div
    id="carousel-track"
    class="flex transition-transform duration-500 ease-in-out"
  >
    <slot />
  </div>

  <!-- Controls -->
  <button
    id="prevBtn"
    class="absolute top-1/2 left-4 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
    aria-label="Previous slide"
  >
    ‹
  </button>
  <button
    id="nextBtn"
    class="absolute top-1/2 right-4 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full"
    aria-label="Next slide"
  >
    ›
  </button>
</div>

<script>
  let currentIndex = 1
  const track = document.getElementById('carousel-track')
  const slides = track?.children ?? []
  const totalSlides = slides.length

  updateSlide(false)

  function updateSlide(animated = true) {
    if (track) {
      track.style.transition = animated ? 'transform 0.5s ease-in-out' : 'none'
      track.style.transform = `translateX(-${currentIndex * 100}%)`
    }
  }

  document.getElementById('nextBtn')?.addEventListener('click', () => {
    currentIndex++
    updateSlide()

    if (currentIndex === totalSlides - 1) {
      setTimeout(() => {
        currentIndex = 1
        updateSlide(false)
      }, 500) // match transition duration
    }
  })

  document.getElementById('prevBtn')?.addEventListener('click', () => {
    currentIndex--
    updateSlide()

    if (currentIndex === 0) {
      setTimeout(() => {
        currentIndex = totalSlides - 2
        updateSlide(false)
      }, 500)
    }
  })
</script>
